

{%- macro CONSTRUCT_OUTPUT(output, ident_width) -%}
{{output.python_type.constructor}}(
{%- filter indent(ident_width) %}
    {%- for field in output.fields -%}
    {%- if output.fields[field].type == "Simple" %}
    {% if output.fields[field].decode %}
    {{field}}={{output.fields[field].decode}}(row["{{field}}"]),
    {% else%}
    {{field}}=row["{{field}}"],
    {% endif %}
    {%- else %}
    {% set embedded = output.fields[field] %}
    {{field}}={{embedded.python_type}}(
        {%- for field in embedded.fields -%}
        {% if output.fields[field].decode %}
        {{field}}={{output.fields[field].decode}}(row["{{field}}"]),
        {% else %}
        {{field}}=row["{{field}}"],
        {% endif %}
        {%- endfor %}
    )
    {%- endif %}
    {%- endfor %}
)
{%- endfilter %}
{%- endmacro -%}


{%- macro DECLARE_PARAMETERS(parameters) -%}
    {%- for parameter in parameters -%}
    , {{parameter.name}}: {{parameter.python_type.annotation}}
    {%- endfor -%}
{%- endmacro -%}

{%- macro RENDER_METHOD(method) -%}
{%- if method.query.cmd == ':one' -%}
async def {{method.query.name}}(self{{DECLARE_PARAMETERS(method.parameters)}}) -> {{method.output.python_type.annotation}}:
    row = await self.connection.fetchrow(
        self.{{method.query.name | upper }}
        {%- for parameter in method.parameters -%}
        , {{parameter.name}}
        {%- endfor %}
    )
    return {{CONSTRUCT_OUTPUT(method.output, 4)}}
{%- elif method.query.cmd == ':many' -%}
async def {{method.query.name}}(self{{DECLARE_PARAMETERS(method.parameters)}}) -> list[{{method.output.python_type.annotation}}]:
    rows = await self.connection.fetch(
        self.{{method.query.name | upper }}
        {%- for parameter in method.parameters -%}
        , {{parameter.name}}
        {%- endfor %}
    )
    return [
        {{CONSTRUCT_OUTPUT(method.output, 8)}}
        for row in rows
    ]
{%- elif method.query.cmd == ':exec' -%}
async def {{method.query.name}}(self{{DECLARE_PARAMETERS(method.parameters)}}) -> str:
    return await self.connection.exec(
        self.{{method.query.name | upper }}
        {%- for parameter in method.parameters -%}
        , {{parameter.name}}
        {%- endfor %}
    )
{%- endif -%}
{%- endmacro -%}
{%- if method -%}
{{RENDER_METHOD(method)}}
{%- endif -%}
