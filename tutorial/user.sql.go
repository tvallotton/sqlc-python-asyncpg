// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package tutorial

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const get_all_users = `-- name: get_all_users :many
select id, email from "user_"
`

func (q *Queries) get_all_users(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, get_all_users)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_posts_and_authors = `-- name: get_posts_and_authors :many
select user_.id, user_.email, post.id, post.author_id, post.title from user_ join post on user_.id = post.author_id
`

type get_posts_and_authorsRow struct {
	User User
	Post Post
}

func (q *Queries) get_posts_and_authors(ctx context.Context) ([]get_posts_and_authorsRow, error) {
	rows, err := q.db.Query(ctx, get_posts_and_authors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []get_posts_and_authorsRow
	for rows.Next() {
		var i get_posts_and_authorsRow
		if err := rows.Scan(
			&i.User.ID,
			&i.User.Email,
			&i.Post.ID,
			&i.Post.AuthorID,
			&i.Post.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_user_by_id = `-- name: get_user_by_id :one
select id, email from "user_" where id = $1
`

func (q *Queries) get_user_by_id(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, get_user_by_id, id)
	var i User
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}
